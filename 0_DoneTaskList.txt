第2回分勉強会スタート
	の前に第1回勉強会分で、スーパークラスにメソッドをよせていたのに、サブクラスで削除していないメソッドや、テストを削除してキレイにした
----------------ここからベックの逆襲が始まる---------------
なんかgitがおかしいからテスト　resetしたあとに、rebase --abort的なやつをやった

git push -f origin HEAD^:masterをやって、リモートリポジトリのコミットを消した
あとなんかfrancのクラスで定義されていないものをテストしているメソッドを消した
requireのファイルなんかも整理した
---------------ようやくここからベックの第2の人生が始まる----------
10章では、timesメソッドのスーパークラスに寄せることｗ考える
	メソッドのインライン化を実施　(メソッドの起動をメソッド本体と置き換えること
	fracとdollarのtimesメソッドの通貨の部分を定数ではなくて、変数で返すようにした
	francのtimesメソッドでfrancではなく、moneyを返すようにしたいので、とりあえず変更してテストを実行してみる=>失敗
		francTestとdollarTestでの、timesメソッドのテスト項目で、equalsメソッドを使って値を見るようにテスト項目を書き換えた
------------------------------------------------------------------
11章スタート
	既にサブクラスのコンストラクタを削除していたという事実が発覚する
	
	Moneyテストでdollarの参照を行なっていたテストケースがあり、moneyのequalsメソッドでテストの書き換えを実施した
	用なしのdollarを削除した
	次は、Francのテストだが、moneyの中でのtestDifferentClassEqualityを削除できるか考える

11章スタート
	francを削除したい
		moneyTestでtestDifferentでfrancを参照している。
			そもそも等価性（違うdollarとfrancでのふるまい)を担保することができているかtestEqualityを見てみる
		問題なさそうなので、testDifferentを削除する
	francも削除する
  ---------------------------
  12章
  	まずは異なる紙幣の加法に入る前に、簡単に同一貨幣の足し算を実装することにする。
		シンプルな加法のテストコード testSimpleAdditionを実装した。
			Bankクラスとexpressionインターフェースを実装する。
				BankがExpressionに為替レートを適用することにより貨幣換算を行う
					テストコードを実装する。
				Expressionインターフェースを実装し、moneyはインターフェースを満たす宣言をする
			Bankクラスを実装する
		reduceのスタブを実装する
	とりあえずbankのreduceメソッドで簡易的にドルを返した
	グリーンバーでテストをパスする
----------------------------
	13章
		Money::plus()を変えるために、sumクラスを作成し、コンストラクタを設定して現状のテストをパスすることを確認した
			Bank::reduce()メソッドのテストを追加した。
				Bank::reduce()メソッドの中身を追加し、グリーンバーを通した
