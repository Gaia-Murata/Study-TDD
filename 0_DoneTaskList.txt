第2回分勉強会スタート
	の前に第1回勉強会分で、スーパークラスにメソッドをよせていたのに、サブクラスで削除していないメソッドや、テストを削除してキレイにした
----------------ここからベックの逆襲が始まる---------------
なんかgitがおかしいからテスト　resetしたあとに、rebase --abort的なやつをやった

git push -f origin HEAD^:masterをやって、リモートリポジトリのコミットを消した
あとなんかfrancのクラスで定義されていないものをテストしているメソッドを消した
requireのファイルなんかも整理した
---------------ようやくここからベックの第2の人生が始まる----------
10章では、timesメソッドのスーパークラスに寄せることｗ考える
	メソッドのインライン化を実施　(メソッドの起動をメソッド本体と置き換えること
	fracとdollarのtimesメソッドの通貨の部分を定数ではなくて、変数で返すようにした
	francのtimesメソッドでfrancではなく、moneyを返すようにしたいので、とりあえず変更してテストを実行してみる=>失敗
		francTestとdollarTestでの、timesメソッドのテスト項目で、equalsメソッドを使って値を見るようにテスト項目を書き換えた
------------------------------------------------------------------
11章スタート
	既にサブクラスのコンストラクタを削除していたという事実が発覚する
	
	Moneyテストでdollarの参照を行なっていたテストケースがあり、moneyのequalsメソッドでテストの書き換えを実施した
	用なしのdollarを削除した
	次は、Francのテストだが、moneyの中でのtestDifferentClassEqualityを削除できるか考える

11章スタート
	francを削除したい
		moneyTestでtestDifferentでfrancを参照している。
			そもそも等価性（違うdollarとfrancでのふるまい)を担保することができているかtestEqualityを見てみる
		問題なさそうなので、testDifferentを削除する
	francも削除する
  ---------------------------
  12章
  	まずは異なる紙幣の加法に入る前に、簡単に同一貨幣の足し算を実装することにする。
		シンプルな加法のテストコード testSimpleAdditionを実装した。
			Bankクラスとexpressionインターフェースを実装する。
				BankがExpressionに為替レートを適用することにより貨幣換算を行う
					テストコードを実装する。
				Expressionインターフェースを実装し、moneyはインターフェースを満たす宣言をする
			Bankクラスを実装する
		reduceのスタブを実装する
	とりあえずbankのreduceメソッドで簡易的にドルを返した
	グリーンバーでテストをパスする
----------------------------
	13章
		Money::plus()を変えるために、sumクラスを作成し、コンストラクタを設定して現状のテストをパスすることを確認した
			Bank::reduce()メソッドのテストを追加した。
				Bank::reduce()メソッドの中身を追加し、グリーンバーを通した

			Bank::reduce()の見栄えが悪いからメソッドの中身をSumへ移動した。理由としては下記２つ
				全てのexpressionで動作させるために(意味があまりよくわからないｗ）
				フィールドへの2段階の参照　$this->augend->getAmount　（これは意味がわかる）

		引数がsumではなくてmoneyだった場合のテストケースを追加した
			Bank::reduce()にSumではなくて、Moneyインスタンスが引数として渡された時の処理を実装した
				Moneyインスタンスが渡った時に、明示的にreduce($toString)と処理を書き足した

		Bank::reduce()でMoneyインスタンスであった場合、Moneyインスタンスでそのまま変換して返すという処理を書いていたが冗長なのでsumでもmoneyでも引数のオブジェクトでreduceメソッドを実行して返す実装に変更して
			Bank::reduce()で冗長であった部分を削除した

		この章でやったこと
			あとで必要になると想われる２つのインスタンスをプロパティにもつSumオブジェクトの作成を促すテストを作成した。
			コードをキャストで実装し、テストを動作させながら、メソッドの中身のコードが属する場所を移動した。：		
			明示的なクラスチェック(instanceof Money)を除去するために、多様性を導入した。
---------------------------
	14章　変化
		2フラン持っているが1ドル欲しいという場合のテストコードをかく
			Money::reduce()メソッドを実装してグリーンを出す。
				Moneyが為替レートを知っているのは設計として面倒なので、為替レートについてはBankのみ扱うようにrateに関する部分をBankに切り出す

		BankがRateを決めて、交換をするという設計にした。
			PHPでは配列のキーにオブジェクトをいれられなかったので、とりあえずPairクラスは作らない方向で、SplObjectStorageというのだとできるとかなんとか
